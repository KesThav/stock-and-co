select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>% View
tmp = df_concurrency %>% filter(elapsed < quantile(elapsed,0.99))
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(func == "addProduct" & type == "rest")
tmp2 = df_concurrency %>% filter(func != "addProduct" & type != "rest")
tmp = df_concurrency %>% mutate(ifelse(type == "rest" & func == "addProduct", elapsed / 4,elapsed ))
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% View
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% select(type, func, interval, elapsed) %>% View
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% select(type, func, interval, elapsed) %>% arrange(type, func, interval) %>% View
tmp = df_concurrency %>% filter(test_type == "product-users")
tmp = df_concurrency %>% filter(test_type == "productBoughtByUser")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser") %>% filter(elapsed < elapsed(elapsed, 0.99))
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = df_concurrency %>% filter(func == "productBoughtByUser") %>% filter(elapsed < quantile(elapsed, 0.99))
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
df_jm = readRDS("df_jm.rds")
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
library(flexdashboard)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(data.table)
library(zoo)
library(kableExtra)
library(collapse)
library(data.table)
library(stringr)
library(lubridate)
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.99)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.95)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
#filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
filter(elapsed < quantile(elapsed,0.99) & elapsed > quantile(elapsed,0.01)) %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
install.packages("recipes")
install.packages("recipes")
?read.csv
sessionInfo()
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.1.0.tar.gz", repos = NULL, type="source")
install.packages("C:/Users/kesig/Downloads/rlang_1.1.0.tar.gz", repos = NULL, type = "source")
install.packages(c("cachem", "cli", "collapse", "colorspace", "commonmark", "curl", "data.table", "DT", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "gtable", "htmlwidgets", "httpuv", "httr", "knitr", "markdown", "openssl", "purrr", "Rcpp", "rlang", "rmarkdown", "sass", "sourcetools", "stringi", "svglite", "tibble", "tidyr", "tinytex", "utf8", "xfun", "yaml"))
install.packages(c("cachem", "cli", "collapse", "colorspace", "commonmark", "curl", "data.table", "DT", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "gtable", "htmlwidgets", "httpuv", "httr", "knitr", "markdown", "openssl", "purrr", "Rcpp", "rlang", "rmarkdown", "sass", "sourcetools", "stringi", "svglite", "tibble", "tidyr", "tinytex", "utf8", "xfun", "yaml"))
install.packages(c("cachem", "cli", "collapse", "colorspace", "commonmark", "curl", "data.table", "DT", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "gtable", "htmlwidgets", "httpuv", "httr", "knitr", "markdown", "openssl", "purrr", "Rcpp", "rlang", "rmarkdown", "sass", "sourcetools", "stringi", "svglite", "tibble", "tidyr", "tinytex", "utf8", "xfun", "yaml"))
install.packages(c("cachem", "cli", "collapse", "colorspace", "commonmark", "curl", "data.table", "DT", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "gtable", "htmlwidgets", "httpuv", "httr", "knitr", "markdown", "openssl", "purrr", "Rcpp", "rlang", "rmarkdown", "sass", "sourcetools", "stringi", "svglite", "tibble", "tidyr", "tinytex", "utf8", "xfun", "yaml"))
install.packages(c("cachem", "cli", "collapse", "colorspace", "commonmark", "curl", "data.table", "DT", "evaluate", "fansi", "fastmap", "flexdashboard", "fontawesome", "fs", "gtable", "htmlwidgets", "httpuv", "httr", "knitr", "markdown", "openssl", "purrr", "Rcpp", "rlang", "rmarkdown", "sass", "sourcetools", "stringi", "svglite", "tibble", "tidyr", "tinytex", "utf8", "xfun", "yaml"))
devtools::install_github('rstudio/shinyapps')
remove.packages("rlang")
remove.packages("rlang")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
detach(package::rlang,unload=TRUE)
detach(package:rlang,unload=TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.10.tar.gz", repos = NULL, type="source")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("rlang")
install.packages("rlang")
devtools::install_github('rstudio/shinyapps')
library(flexdashboard)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(data.table)
library(zoo)
library(kableExtra)
library(collapse)
library(data.table)
library(stringr)
library(lubridate)
#disable scientific notation
options(scipen=999)
#prepare sequential benchmark data
#there are two categories: few_data and more_data
df_s = data.frame()
files = c("few_data/sequential_createProduct_GraphQL",
"few_data/sequential_createProduct_REST",
"few_data/sequential_userThatBoughtProduct_GraphQL",
"few_data/sequential_userThatBoughtProduct_REST",
"few_data/sequential_getUsers_REST",
"few_data/sequential_getUsers_GraphQL",
"lot_data/sequential_createProduct_GraphQL",
"lot_data/sequential_createProduct_REST",
"lot_data/sequential_userThatBoughtProduct_GraphQL",
"lot_data/sequential_userThatBoughtProduct_REST",
"lot_data/sequential_getUsers_REST",
"lot_data/sequential_getUsers_GraphQL")
#load data and rbind everything
for(file in files){
data <- fromJSON(paste0("sequential/",file,".json"))
data <- data.table::rbindlist(list(data), fill = TRUE) %>% as.data.frame()
data['type'] = file
df_s = dplyr::bind_rows(df_s,data)
}
rm(data)
#split the file name and create new columns
df_s <- df_s %>% select(!starts_with('errors')) %>%
tidyr::separate(data = .,col = type,sep = "_",into = c("category","to_remove","func","type"),remove = FALSE) %>%
select(-c("to_remove")) %>%
tidyr::gather("requests","time",1:5) %>%
mutate(requests = as.integer(requests)) %>%
mutate(time = time/1000)
#create copy
copy_df_s = df_s
df_s %>%
group_by(category,func,type,requests) %>%
summarise(n = sum(!is.na(time))) %>%
rename(n_run = n) %>%
ungroup() %>%
spread(requests, n_run) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
tmp_df <- expand.grid(category=unique(df_s$category),func=unique(df_s$func),type=unique(df_s$type),requests=seq(1:10000))
df_s = df_s %>%
group_by(category,func,type,requests) %>%
summarise(mean_time = mean(time,na.rm=T),
median_time = median(time,na.rm=T),
max_time = fmax(time,na.rm=T),
min_time = fmin(time,na.rm=T)) %>%
mutate(mean_time = ifelse(is.na(mean_time) | is.nan(mean_time), lag(mean_time)*10 ,mean_time),
median_time = ifelse(is.na(median_time) | is.nan(median_time), lag(median_time)*10 ,median_time),
max_time = ifelse(is.na(max_time) | is.nan(max_time), lag(max_time)*10 ,max_time),
min_time = ifelse(is.na(min_time) | is.nan(min_time), lag(min_time)*10 ,min_time)
) %>%
ungroup()
df_s = df_s %>% group_by(category, func, type) %>% mutate(mean_time = ifelse(category == "lot" & func == "userThatBoughtProduct" & requests == 1000, lag(mean_time)*10,
ifelse(category == "lot" & func == "userThatBoughtProduct" & requests == 10000, lag(mean_time,2)*100, mean_time)))
df_s = tmp_df %>%
left_join(df_s,by=c("category","func","type","requests")) %>%
mutate(mean_time = ifelse(is.na(mean_time), NA, mean_time)) %>%
mutate(mean_time = ifelse(is.nan(mean_time), NA, mean_time)) %>%
mutate(median_time = ifelse(is.na(median_time), NA, median_time)) %>%
mutate(median_time = ifelse(is.nan(median_time), NA, median_time)) %>%
mutate(max_time = ifelse(is.na(max_time), NA, max_time)) %>%
mutate(max_time = ifelse(is.nan(max_time), NA, max_time)) %>%
mutate(min_time = ifelse(is.na(min_time), NA, min_time)) %>%
mutate(min_time = ifelse(is.nan(min_time), NA, min_time))
df_s = df_s %>%
group_by(category,func,type) %>%
arrange(category,func,type,requests) %>%
mutate(mean_time = round(na.spline(mean_time),digit=2),
median_time = round(na.spline(median_time),digit=2),
max_time = round(na.spline(max_time),digit=2),
min_time = round(na.spline(min_time),digit=2)) %>%
ungroup()
df_s = df_s %>% mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "userThatBoughtProduct", "products-users",func)))
p1 = ggplot(df_s %>% mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func === "addProduct") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
p1 = ggplot(df_s %>% filter(func == "addProduct") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func == "products-users") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func == "getUsers") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=500) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=700) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=300) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 1000,height=400) %>% layout(hovermode = "x unified") %>%   layout(legend = list(orientation = "h"))
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified") %>%   layout(legend = list(orientation = "h"))
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func == "products-users") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func == "getUsers") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
p1 = ggplot(df_s %>% filter(func == "addProduct") %>%  mutate(both = paste0(category, " - ", func)),aes(x=requests,y=mean_time,color=type)) + geom_line()  + facet_wrap(both~.,scales="free_y") + theme_bw() + ylab("Response time (second)") + xlab("Number of request")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
ggplotly(p1,width = 800,height=400) %>% layout(hovermode = "x unified")
