mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
ggplotly(df_concurrency %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(elapsed > 5)
ggplotly(df_concurrency %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
min(df_concurrency$elapsed)
median(df_concurrency$elapsed)
max(df_concurrency$elapsed)
min(df_concurrency$elapsed)
df_concurrency %>% group_by(elapsed) %>% count() %>% View
tmp = df_concurrency %>% filter(elapsed > 10)
ggplotly(df_concurrency %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(elapsed > 600)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(elapsed > 500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(elapsed > 0)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>% View
tmp = df_concurrency %>% filter(elapsed < quantile(elapsed,0.99))
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(func == "addProduct" & type == "rest")
tmp2 = df_concurrency %>% filter(func != "addProduct" & type != "rest")
tmp = df_concurrency %>% mutate(ifelse(type == "rest" & func == "addProduct", elapsed / 4,elapsed ))
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% View
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% select(type, func, interval, elapsed) %>% View
tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>% select(type, func, interval, elapsed) %>% arrange(type, func, interval) %>% View
tmp = df_concurrency %>% filter(test_type == "product-users")
tmp = df_concurrency %>% filter(test_type == "productBoughtByUser")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser") %>% filter(elapsed < elapsed(elapsed, 0.99))
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = df_concurrency %>% filter(func == "productBoughtByUser") %>% filter(elapsed < quantile(elapsed, 0.99))
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
df_jm = readRDS("df_jm.rds")
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
library(flexdashboard)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(data.table)
library(zoo)
library(kableExtra)
library(collapse)
library(data.table)
library(stringr)
library(lubridate)
df_concurrency = df_jm %>%  filter(test_type == "concurrency", func!="all")
tmp = df_concurrency %>% filter(func == "productBoughtByUser")
tmp2 = df_concurrency %>% filter(func != "productBoughtByUser")
tmp = rbind(tmp,tmp2)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.99)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.95)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
#filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
filter(elapsed < quantile(elapsed,0.95) & elapsed > quantile(elapsed,0.05)) %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
filter(elapsed < quantile(elapsed,0.99) & elapsed > quantile(elapsed,0.01)) %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(tmp %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = median(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) +
facet_wrap(func~.) + theme_bw() +
xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
