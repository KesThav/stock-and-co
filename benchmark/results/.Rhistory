errors = sum(errors) + sum(timeouts)) %>%
ungroup()
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup()
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
select(-value) %>% spread(key,percent) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
select(-value) %>% spread(key,percent) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup()
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup()
ggplotly(p)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup()
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)"))
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(-key, -value, -percent) %>%
View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(-key, -value, -percent) %>%
spread(concurrent_user,total) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(-key, -value, -percent) %>%
spread(concurrent_user,total) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(-c(key, value, percent)) %>%
spread(concurrent_user,total) %>% View
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(c(-key, -value, -percent)) %>%
spread(concurrent_user,total) %>% View
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(c(-key, -value, -percent)) %>%
spread(concurrent_user,total)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(c(-key, -value, -percent))
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
select(c(-key, -value, -percent)) %>%
spread(concurrent_user,total)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
mutate(type = paste0(type,"-",func)) %>%
select(c(-key, -value, -percent,-func)) %>%
spread(concurrent_user,total)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
mutate(type = paste0(type,"-",func)) %>%
select(c(-key, -value, -percent,-func))
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
mutate(type = paste0(type,"-",func)) %>%
select(c(-key, -value, -percent,-func)) %>%
tidyr::spread(concurrent_user,total)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
mutate(type = paste0(type,"-",func)) %>%
select(c(-key, -value, -percent,-func)) %>%
tidyr::spread(concurrent_user,type)
df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts),
total = X2xx + errors) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
mutate(total = paste0(total," (",percent,"%)")) %>%
mutate(type = paste0(type,"-",func)) %>%
select(c(-key, -value, -percent,-func)) %>%
tidyr::spread(type,total)
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
arrange(type,concurrent_user) %>%
ggplot(.,aes(x=concurrent_user,y=percent,fill=key)) +
geom_bar(stat="identity") +
facet_grid(func~type) + theme_bw()
ggplotly(p)
ggplotly(p)
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
arrange(type,concurrent_user) %>%
ggplot(.,aes(x=concurrent_user,y=percent,fill=key)) +
geom_bar(stat="identity") +
facet_grid(func~type) + theme_bw() + xlab("Concurrent user")
ggplotly(p)
ggplotly(p)
#compute the percentage of success, errors and timeout for each concurrent user (1,10,100,1000,10000)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
arrange(type,concurrent_user) %>%
ggplot(.,aes(x=concurrent_user,y=percent,fill=key)) +
geom_bar(stat="identity") +
facet_grid(func~type) + theme_bw() + xlab("Concurrent user") + ylab("Percent")
ggplotly(p)
ggplotly(p)
ggplotly(p,width = 1000,height=500)
p = df_c %>% select("type","func","concurrent_user","X2xx","errors","timeouts") %>%
group_by(type,func,concurrent_user) %>%
summarise(X2xx = sum(X2xx),
errors = sum(errors) + sum(timeouts)) %>%
ungroup() %>%
gather("key", "value",4:5) %>%
group_by(type, func,concurrent_user) %>%
mutate(percent = round(value / sum(value) * 100,digits = 2)) %>%
ungroup() %>%
arrange(type,concurrent_user) %>%
mutate(key = ifelse(key == "X2xx", "success","failure")) %>%
ggplot(.,aes(x=concurrent_user,y=percent,fill=key)) +
geom_bar(stat="identity") +
facet_grid(func~type) + theme_bw() + xlab("Concurrent user") + ylab("Percent")
ggplotly(p,width = 1000,height=500)
View(df_c)
colnames(df_c)
df_c %>% group_by(type,func, concurrent_user) %>% filter(requests = max(requests))
df_c %>% group_by(type,func, concurrent_user) %>% filter(requests == max(requests))
df_c %>% group_by(type,func, concurrent_user) %>% filter(requests.sent == max(requests.sent))
df_c %>% group_by(type,func, concurrent_user) %>% filter(requests.sent == max(requests.sent)) %>% View
df_c %>% group_by(type,func, concurrent_user) %>% filter(requests.sent == max(requests.sent)) %>% View
df_c %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min) %>% View
df_c %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min) %>% View
b = df_c %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min)
b = df_c %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min)
View(b)
b %>% ggplot(.,aes(concurrent_user,y=latency.average,color=type)) + geom_point()
b %>% ggplot(.,aes(concurrent_user,y=latency.average,color=type)) + geom_bar()
b %>% ggplot(.,aes(concurrent_user,y=latency.average,color=type)) + geom_bar(stat="identity")
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity")
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge")
View(df_c)
df_c %>% filter(errors == 0) %>% group_by(func, type) %>% count()
df_c %>% filter(errors == 0)  %>% count()
df_c %>% filter(errors == 0) %>% group_by(func, type,concurrent_user) %>% count()
df_c %>% filter(errors == 0) %>% group_by(func, type,concurrent_user) %>% count() %>% View
df_c %>% filter(errors == 0) %>% group_by(func, type,concurrent_user)  %>% View
df_c %>% filter(errors == 0) %>% group_by(func, type,concurrent_user) %>% count()
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min)
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge")
View(b)
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.)
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_point(aes(concurrent_user, latency.max))
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_point(aes(concurrent_user, latency.max,color=type))
colnames(df_c)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev)
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9))
b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) %>% ggplotly(.)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9))
ggplotly(tmp)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw()
ggplotly(tmp)
ggplotly(tmp)
ggplotly(tmp,width = 1000,height=500)
ggplotly(tmp,width = 1000,height=500)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average /1000,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() +
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average /1000,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() +
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / sqrt(1000))
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average /1000,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() +
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / sqrt(1000))
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average /1000,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() +
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / sqrt(1000))
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average /1000,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / sqrt(1000))
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / 1000)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / 1000)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.min, ymax=latency.max), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / 1000,
latency.max = latency.max / 1000,
latency.min = latency.min / 1000)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.min, ymax=latency.max), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
b = df_c %>%
filter(errors == 0) %>%
group_by(type,func, concurrent_user) %>%
filter(requests.sent == max(requests.sent)) %>%
ungroup() %>%
select(type, func, concurrent_user, requests.sent, latency.average, latency.max, latency.min, throughput.average, throughput.max, throughput.min,latency.stddev) %>%
mutate(latency.average = latency.average/1000,
latency.stddev = latency.stddev / 1000,
latency.max = latency.max / 1000,
latency.min = latency.min / 1000)
tmp = b %>% ggplot(.,aes(concurrent_user,y=latency.average,fill=type)) + geom_bar(stat="identity",position="dodge") + facet_wrap(func~.) + geom_errorbar(aes(ymin=latency.average-latency.stddev, ymax=latency.average+latency.stddev), width=.2,
position=position_dodge(.9)) + theme_bw() + xlab("Concurrent user") + ylab("Response time (second)")
ggplotly(tmp,width = 1000,height=500)
ggplotly(tmp,width = 1000,height=500)
