ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth() +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
a = df_jm %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,10000,by=1000)) %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1)  +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), elapsed > 6000) %>% distinct(grpThreads,success) %>% View
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), elapsed > 6000, func == "createProduct") %>% distinct(grpThreads,success) %>% View
df_jm %>% select(func) %>% unique()
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), elapsed > 6000, func == "addProduct") %>% distinct(grpThreads,success) %>% View
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), elapsed > 5000, func == "addProduct") %>% distinct(grpThreads,success) %>% View
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), elapsed > 3000, func == "addProduct") %>% distinct(grpThreads,success) %>% View
df_jm %>% filter(test_type == "load", success =="success", type=="graphql",grpThreads %in% seq(0,10000,by=1000), func == "addProduct") %>% distinct(grpThreads,success) %>% View
a = df_jm %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,10000,by=1000)) %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth() +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
?geom_smooth
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth(se=F) +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth(se=FALSE) +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
ggplotly(df_jm %>%
filter(grpThreads %in% seq(0,10000,by=1000)) %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) + facet_wrap(func~.) + theme_bw() + xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
ggplotly(df_jm %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(type,func) %>%
arrange(timeStamp) %>%
mutate(difference = as.integer(difftime(timeStamp,first(timeStamp),units="secs"))) %>%
mutate(interval = cut(difference,seq(0, max(difference)+10, 60),dig.lab=10)) %>%
ungroup() %>%
group_by(type,func,interval) %>%
summarise(response = mean(elapsed/1000,na.rm=T),n=n()) %>%
ungroup() %>%
mutate(lower_bound = str_match(as.character(interval),"(?<=\\()(.*)(?=,)")[,2]) %>%
filter(!is.na(lower_bound)) %>%
mutate(lower_bound = as.integer(lower_bound)) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func))) %>%
ggplot(.)  + geom_line(aes(x=lower_bound/60,y=response,color=type)) + facet_wrap(func~.) + theme_bw() + xlab("Time (minute)") + ylab("Response time (second)"),width = 1000,height=500)
a = df_jm %>%
#filter(elapsed > 6000) %>%
#filter(grpThreads %in% seq(0,10000,by=1000)) %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth(se=FALSE) +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
a = df_jm %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,10000,by=1000)) %>%
filter(test_type == "load") %>%
select(-test_type) %>%
filter(success == "success") %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point(alpha=1) + geom_smooth(se=FALSE) +
facet_grid(.~func) + theme_bw()+ ylab("Response time (second)") + xlab("Concurrent user"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency") %>%
select(-test_type) %>%
filter(success == "success")
unique_group = unique(tmp$grpThreads) %>% sort()
seq = seq(1,100,length.out=length(unique_group))
tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 2)
tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
tmp = df_jm %>%
filter(test_type == "concurrency") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,10000,by=1000)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
path = "D:/Uni/Travail de master/apache-jmeter-5.5/a transferer/" #change this line to match your path
files = c("load_addProduct_graphql_10000",
"load_addProduct_rest_10000",
"load_getUsers_graphql_10000",
"load_getUsers_rest_10000",
"load_productBoughtByUser_graphql_10000",
"load_productBoughtByUser_rest_10000",
"concurrency_all_rest_1000",
"concurrency_getUser_rest_1000",
"concurrency_addProduct_rest_1000",
"concurrency_productBoughtByUser_rest_1000",
"concurrency_all_graphql_1000",
"concurrency_getUser_graphql_1000",
"concurrency_addProduct_graphql_1000",
"concurrency_productBoughtByUser_graphql_1000",
)
path = "D:/Uni/Travail de master/apache-jmeter-5.5/a transferer/" #change this line to match your path
files = c("load_addProduct_graphql_10000",
"load_addProduct_rest_10000",
"load_getUsers_graphql_10000",
"load_getUsers_rest_10000",
"load_productBoughtByUser_graphql_10000",
"load_productBoughtByUser_rest_10000",
"concurrency_all_rest_1000",
"concurrency_getUser_rest_1000",
"concurrency_addProduct_rest_1000",
"concurrency_productBoughtByUser_rest_1000",
"concurrency_all_graphql_1000",
"concurrency_getUser_graphql_1000",
"concurrency_addProduct_graphql_1000",
"concurrency_productBoughtByUser_graphql_1000"
)
df_jm = data.frame()
for(file in files) {
data = read.csv(paste0(path,"results_",file,".csv"),header = T)
split_file_name = stringr::str_split(file,"_") %>% unlist()
data["test_type"] = split_file_name[1]
data["func"] = split_file_name[2]
data["type"] = split_file_name[3]
df_jm = rbind(df_jm,data)
}
path = "D:/Uni/Travail de master/apache-jmeter-5.5/a transferer/" #change this line to match your path
files = c("load_addProduct_graphql_10000",
"load_addProduct_rest_10000",
"load_getUsers_graphql_10000",
"load_getUsers_rest_10000",
"load_productBoughtByUser_graphql_10000",
"load_productBoughtByUser_rest_10000",
"concurrency_all_rest_1000",
"concurrency_getUsers_rest_1000",
"concurrency_addProduct_rest_1000",
"concurrency_productBoughtByUser_rest_1000",
"concurrency_all_graphql_1000",
"concurrency_getUsers_graphql_1000",
"concurrency_addProduct_graphql_1000",
"concurrency_productBoughtByUser_graphql_1000"
)
df_jm = data.frame()
for(file in files) {
data = read.csv(paste0(path,"results_",file,".csv"),header = T)
split_file_name = stringr::str_split(file,"_") %>% unlist()
data["test_type"] = split_file_name[1]
data["func"] = split_file_name[2]
data["type"] = split_file_name[3]
df_jm = rbind(df_jm,data)
}
df_jm = df_jm %>%
mutate(success = ifelse(success == "true", "success","failure"))
df_jm = df_jm %>%
mutate(timeStamp =  as.POSIXct(timeStamp / 1000, origin = "1970-01-01"))
df_jm %>% saveRDS(.,"df_jm.rds")
rm(data)
# df_jm = readRDS("df_jm.rds")
unique(df_jm$func)
tmp = df_jm %>%
filter(test_type == "concurrency", func=="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
df_jm %>%
filter(test_type == "concurrency", func=="all") %>%
select(-test_type) %>%
group_by(func,type,grpThreads,success) %>%
count() %>%
ggplot(.) + geom_bar(aes(x=grpThreads,y=n, color=success,))
df_jm %>%
filter(test_type == "concurrency", func=="all") %>%
select(-test_type) %>%
group_by(func,type,grpThreads,success) %>%
count() %>%
ggplot(.) + geom_bar(aes(x=grpThreads,y=n, color=success))
df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
group_by(func,type,success) %>%
count() %>%
spread(success,n) %>%
select(func,type,success,failure) %>%
mutate(`success percent (%)` = round(success / (success + failure)*100,digits = 2)) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + facet_wrap(.~func) theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth() + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=50)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
#filter(grpThreads %in% seq(0,1000,by=50)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=50)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=200)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
tmp = df_jm %>%
filter(test_type == "concurrency", func!="all") %>%
select(-test_type) %>%
filter(success == "success")
# unique_group = unique(tmp$grpThreads) %>% sort()
#
# seq = seq(1,100,length.out=length(unique_group))
#
# tmp_coef = data.frame(grpThreads = unique_group,coef = seq) %>% mutate(coef = coef ^ 1.5)
#
# tmp = tmp %>% left_join(tmp_coef,by="grpThreads") %>% mutate(elapsed = elapsed*coef)
a = tmp %>%
#filter(elapsed > 6000) %>%
filter(grpThreads %in% seq(0,1000,by=100)) %>%
group_by(func,type,grpThreads) %>%
summarise(mean = mean(elapsed,na.rm=T),
median = median(elapsed,na.rm=T)) %>%
ungroup() %>%
rename(Threads = grpThreads) %>%
mutate(func = ifelse(func == "createProduct", "addProduct",
ifelse(func == "productBoughtByUser", "products-users",func)))
ggplotly(ggplot(a,aes(x=Threads,y=mean/1000,color=type)) +
geom_point() + geom_smooth(se=FALSE) + facet_wrap(.~func) + theme_bw()+ ylab("Response time (second)"),width = 1000,height=500)
